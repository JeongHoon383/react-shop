// 부모에서 자식한테 보내주는 props를 받은 그대로 렌더링 했을 때는 새로고침시 데이터가 사라지지 않음
// 부모가 자식한테 props를 보내주는게 자식의 랜더링 보다 먼저 수행되는거임?
// 수행되는 것 -> 리액트의 단방향 데이터 흐름 원칙에 따른 것
// 그러나, props로 받은 데이터를 find 함수로 반환 -> 이 동작이 랜더링 이후에 동작되기 때문에 자식 컴포넌트가 랜더링시 오류가 발생
// 그렇다면 find 함수를 랜더링 전에 수행할 수는 없을까? 안됨.
// 반환된 값을 자식 컴포넌트에 렌더링 후 새로고침시 데이터가 날라감
// 결국 조건부 렌더링으로 해줘야됨.
// 데이터를 전달받은게 문제가 아니라 props를 전달받은 후 find 함수를 실행했을때 렌더 후에 할 경우 데이터가 undefined가 나오는 것임

// 문제 정리
// 1. find 함수를 써서 반환된 값을 렌더링 해주려고 했을 때 초기에는 가능했으나 새로고침시 데이터가 날라감
// 2. 해결방법으로 3가지를 생각함
//  1) 조건문 렌더링
//  2) session storage로 저장해서 새로고침시 데이터가 날라가지 않게
//  3) react-router-dom : loader를 사용하여 렌더링 되기 전에 데이터를 미리 도착하게함
// 3. 조건문 렌더링으로 문제 해결
// 4. 나머지 두개로는 해결하지 못함 why? 애초에 props로 전달받은 값을 find 함수로 반환하는 작업에서 렌더링 이후에 발생하기 때문에 undefined가 되는것임
// 5. 데이터를 그 전에 저장되든 미리 도착하게 하는건 상관이 없음.
 6. 덕분에 리액트 생명주기, react 단방향 데이터 흐름 원칙, session&local storage, 부모 컴포넌트 보다 자식 컴포넌트가 먼저 렌더링 우선순위

 // window.sessionStorage.setItem("product", JSON.stringify(curProduct));

  // const sessionProduct = JSON.parse(window.sessionStorage.getItem("product"));

  // if (sessionProduct) {
  // }

  //   // sessionStorage에서 문자열로 저장된 객체를 가져옵니다.
  // const sessionProductStr = window.sessionStorage.getItem("product");

  // if (sessionProductStr) {
  //   // sessionStorage에 "product"가 존재할 경우 객체로 변환합니다.
  //   const sessionProduct = JSON.parse(sessionProductStr);

  //   // 객체의 img 속성에 접근합니다.
  //   console.log(sessionProduct.img);
  // } else {
  //   // sessionStorage에 "product"가 없을 때의 처리
  //   console.log("sessionStorage에 제품 정보가 없습니다.");

  //   // 예시로 새로운 제품 정보를 찾고 저장하는 로직
  //   const curProduct = product.find(
  //     (item) => Number(item.id) === Number(params.id)
  //   );

  //   if (curProduct) {
  //     // 객체를 JSON 문자열로 변환하여 sessionStorage에 저장합니다.
  //     window.sessionStorage.setItem("product", JSON.stringify(curProduct));

  //     // 저장한 객체를 콘솔에 출력합니다.
  //     console.log(curProduct.img);
  //   } else {
  //     console.log("제품을 찾을 수 없습니다.");
  //   }
  // }

  // 초기에 렌더링 될 때 저장이 되고 이후 저장된 값으로 출력만 하면됨
  // 초기에 데이터 세팅만 해주면 된다는 얘기

  // 이미 getItem으로 데이터를 저장해놨기 때문에 새로고침 해도 데이터가 안날라가는거 아님?